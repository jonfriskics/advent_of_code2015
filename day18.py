from copy import deepcopy

input = """
###.##..##.#..#.##...#..#.####..#.##.##.##..###...#....#...###..#..###..###.#.#.#..#.##..#...##.#..#
.#...##.#####..##.......#..####.###.##.#..###.###.....#.#.####.##.###..##...###....#.##.....#.#.#.##
.....#.#.....#..###..####..#.....##.#..###.####.#.######..##......#####.#.##.#########.###..#.##.#.#
...###......#.#..###..#.#.....#.##..#.##..###...#.##.#..#..#.##.#..##......##.##.##.######...#....##
.###.....#...#.#...####.#.###..#..####.#..#.##..####...##.#...#..###...###...####..##....####.##..#.
..#....#...#.......#..###.###....#.##..#.....###.#.##.#....#.#....##.##..#.##.#..###.###.##.##..##.#
##..#####.#.#....#.#...#.#.####..#....#..#....#.#..#.#####...#..##.#.....#.##..##.####......#.#.##..
.#..##..#.#.###..##..##...#....##...#..#.#..##.##..###.####.....#.####.#.....##.#.##...#..####..#...
#.#####.......#####...#...####.#.#.#....#.###.#.##.#####..#.###.#..##.##.#.##....#.##..#....####.#.#
#.##...#####....##.#.#.....##......##.##...#.##.##...##...###.###.##.#.####.####.##..#.##.#.#.####..
#.##.##....###.###.#..#..##.##.#..#.#..##..#.#...#.##........###..#...##.#.#.##.......##.....#...###
###..#.#..##.##.#.#.#...#..#...##.##.#.########.......#.#...#....########..#.#.###..#.#..#.##..#####
####.#.#...#.##.##..#.#...#....#..###..#.#.#.####.#.##.##.#..##..##..#..#####.####.##..########..##.
.#.#...#..##.#..#..###.#..####.......##.#.#.#.##.#####..#..##...#.##...#..#....#..#..###..####.#....
..#.#...#....##...#####..#..#...###.###.....#.###.#....#.#..##...#.##.##.####.#.#.#..#.##.#....#.#..
#....###.####.##..#.#.###..###.##.##..#.#...###..#.##.#####.##.#######..#.#...##.#..........####.###
#.#####.#......#.#......#.....##...##.#.#########.#......##..##..##.#..##.##..#....##...###...#.#...
#..#..##..###.#.#.#.#.....###.#.####.##.##....#.#..##....#.#..#.####..###.##...#######.#####.##.#.#.
..###.#........##.#...###..#.##..#.#....##.#......#..#.##..#.#..#.#..#.####.#####..###.##..#.##.#...
##.###....#..##...#..#.#......##..#...#..#.####..#.##...##.####.#...#..###...#.#.#....###.##..#.#...
..##.##.#.##..##.#..#.###...##..##..#....##..##...####.#..####.###...#.....#..#.##..##..###..#.#...#
#.#....#.....#...##.#...####..#..##..##.####..##..##...####...#....##.#.#######..##.#......######.#.
#.#...###.######.######..##..##....#.#......#......#.#.##.#.##.#.#.#...#...#....#.#.#.#..#.##..#...#
####.###.#.#.##..#.##.#...#.##...#.##.##...#.....#.#..#.####.##..######.#..#.#..##....#.#.#..#.#.#.#
..##......#.#...#.##.##..##..##..#..##..#########.#..###..###.##...#..##.#..#.#.#.######..#....#.#..
..##.##.#...###.#...##..######.##.#..####..#..#.#.##.####.##.##.#...##....#...###.##.####..#....#.#.
####...###..#.#.##.#.#....###..##.#.#..########..#...#.#...#.##....##.##...#.....#.#.....#.....#....
.#.###############....#.##..###..#.####.#.##.##..#..#.#...###...##..##.##.#.....##...###.###.....#..
.###..#..##.##..####.#.###.##.##..#..##....#.#......#......##.#...#.#...#..##.#.#...#...#.##..#.##..
###.#.#.########.#.#..####.#..##.#.##.##.###.##..######...#..##.##.#..#.#...#.##..#####.....#.#.#..#
.##.##..#.#...#####.#.#.###...##...####...#......#...#..####..#.##..........#..#.#..###....######.##
..#####...#.#.#.#..#.##..#...#.#..#.##...##..##.##.#.##.#..#.#...#.......##.#...###.....#...#.#.#.##
##.##.#..######.##...#.....#.###.#..##.#.#.#..####.#....##.#....####...##....#.#.##.#..###.##.##..##
.###.##.#..#.###.####..#.##..####.#.#.##..###.#######.###.###...####........##....###.#...#.#.####.#
........#..#.#..##..########..........#.##.#..##.#...#.....####....##..#..#.#####.###...#...#.##.###
.....#..##.####...##.#####..######.##.#.###.####.##.##.#..##.##.######.##......#..#.####..##....#.##
##...####....#.##.##.###....#.#...#.####..##.#.##.#.#...####.#.#.#.#...##.###...##...###...######.##
.#....#.#.####...#.##.....##...###.#.#.##...##.#####....#.######.#.#....##..##...##....##.#.##.#.#.#
.###..###.#.......#.#######..#.#.#.######....#.#####.#.....#.#########...#....##...##.####.#..#.....
##.#..##..##.....#..##...#..##.##.#..#.#####.##.##.#.##.##...##.######.####..#.##..#####.##...##..#.
#.###...##.#.#.#.##....#.#.##.##..#....#...#.#.........#..#..####..####.####..#.##.##.#....####..##.
.#..######..#####.####.##.#.....#.#.#####..##..###.#.#.#..#.#...#.#######..##....##.##...#######..#.
#...#....#.#.##..#####..#########..#.....#...##.#.#.###...#####..##...##...####.......#######.#..###
.#......#...##.###..#....#...#.#.....#.#...##.#.#..#..###.##.###.#.##..##...#.##......#.###..#.#..##
.#....####...###..#.....##..#...#.#.###.#.#.##...#.##.##.#.#.#..####..###.#.#.#.##.#.#...#..#...####
......##.##.#...#####.##..#.###..#.#####..##.#..##.###......#...#...#..#......###.######...#.#.##..#
###..#...#.##..###.#....##...#..#####.#.#..#.###...#####.#....##..####.#.##...#.#...##..#.#.#.#..#.#
...##.#.##.##..#.#.#.###.#.#...#.....###.###.##...#.###.##...##..#..###.#..##.##..###.#....###..##..
.##.#..###..###.##.##...#..#####...#.....#####.##..####...#.##.#.#..##.#.#.#....###.....#....##.....
######.#..#.#..#....#.###...####.####.#.........#..##.#..##..##.....#..#.##.##...#...#####.#.##..#.#
.##.###...####....#.####...#####..#..#...#..#.....###.#..#.###..#.###.#.......##.####..#.##.#...##..
........#.#.##.#.....#####.###......##..#.##.#..#...####.#...#..###.#.#...##..#.#...#.####...#.#.###
.#..#.##..##...######.###.##.#.#...#.#.#.#.##..##..##.#.##..#....#.##...#.##.##...##....##.###.##.#.
##...#...#...###.#.#...#...#..###......##.#.#....##..##.#..##.#.######...#..##.#.##.#.#....#.##.##..
...#..###.#....#...#.##..##.#.##.#..###.##..#.##..####.#########....#.....##.#.##.##..##.##.######.#
#.##.#..##.......###...#.###....###.#..####..##.#####.##.###....##....#.###...####..#.#.#.##.....###
.......#...#...##.#...##.#.#..#.##..##.#....###...##.#####...#.........#.......###.##.#.#.###....##.
###.#.##.##.....#.#..#.#..####.####..#..###..........####.#.##...#######.###..#####..#.....#..###..#
#...##.##..####.##.###.#.#######..###.#..#######..#.##.####...#..#.##.####..####.#.#.......####.#...
...#.##..#..#..##........#.#..#..#.#....#.###.#.###..#.......###..#.....#....#..##.#...#.###...##.#.
###.##..#.##.#.#####..#.##.####....#####..###.#.#..#...#...###.#.##..#.#.#.....#.####.#.#.#.#.#.#...
..##..##..#..##.##.#...#..#....####....#...#..####..#.....######.###.####.#....##....##.#.#.###....#
.#.#.#.##..####..#.....#.####.#....#.....#....#.##..#.#..#.#...#.#.#.#..#..#..##.#....####.......#..
..##.##..###......#...#..##...#.###.####.#...#.####..#.#.#.....#.#...####...#.########.##.#.#.#..###
#....#.##.....##.###.##.###..#.####.....####.##...#..##.###...###..###.#....####.#..#..#..#.#..##.#.
.#.#.##....#.##......#.#..###.#....###....#......#.#.##.##.#########..##..#...#.####..#...####..#..#
.#.#.......##.#.##.#...#...#.##.#..#.#.#.##....#..###.###.##.#.#...##.#..#..##....#..###.#...#.#.##.
#.##.#....####...#..##..#.#.#.#.##.#...#####.#...#..#..#.####.####.#.#....#......##..##..###...#..##
..##.###..##.####..#..#..##...###.#.#.#######.####...####......##.##..#...#.##...##....#..#..#.....#
....#..#..#.#.####.#...##..#....####.#..####...#.#...###...#..#..##...#....##...#.....#.#..#.#.#...#
...#.#.#.##..##.###..#.######....####.###...##...###.#...##.####..#.#..#.#..#.##.....#.#.#..##......
.#.##.##.....##.#..###.###.##....#...###.#......#...##.###.#.##.##...###...###...#.######..#......#.
###..#...#......#..##...#....##.#..###.##.####..##..##....####.#...#.#....##..#.#######..#.#.#####..
##...#####..####..##....#.#.###.##.#..#.#..#.....###...###.#####.....#..##.#......#...#.###.##.##...
...#.#.#..#.###..#.#.#....##.#.#..####.##.#.####.#.#.#...#....##....#.##.####..###.#.#...##.#..#..##
#.#.#..#.##..##.##.#...##.#....#...###..##..#.#######.#.###..##......##.#..###.########.#.##..#.#.##
######.###....##..#..#...####....#.#.#..#...#..######.#.#.##..##....##....##.##.##...#..#.####.#.#..
#####.###..#..###......##...##.####.#.#.#.###.......##..##.####..##.####.#..#..####..#.####.#####...
##.#.#.###..##.#.##.#.#.#.##.#...##........###.#.##..####....###.#.####.####.#.......##.##.##...##..
#.#..###...#..##.....##.#..#.#..##..######.#####...###.#.......###...#..##..#..#..##.#.#....#..#..#.
#.#..####.###..#...#...#...#.###..#.#.#.#.#.#.#..#....#.##.##.##..###..####.#..##..##.###.###....##.
#..#.##.#####........#..#.##.#..##.#...#....#..#.##..###..##..##.##..#..##.#.#...#.#.##.#.##....#.#.
.......##..#.....#..#.#.....#.##...####.###..####..#.#.#.#..#.....#....##...#..#.##..###.#.#....#...
#...###########.##.....##...###.#.##.##..####.##...#.####.#####.#####.####...###.##...##..#.#.###..#
....#.#.###.####.###...#...#.#..###.#.#.##...#..#.#.#..#.####..#..###.######.#.####.###...###.#.##.#
.....#..#..########...#.#.#.#.#.#.#.#..###.##..####...##.#.#.#...##..#####.##.#...#.####.#######.##.
.......#...#.#..#..#...#..#..##.....#.##....##.##...##..##.##...##...#.#..#.##.#.###.#.####.#.#..##.
.####...#...#.#.#....##..........##.##.###.##.#.#..#.#.#......########.#...#.####.##.###..##...####.
#.#.#...##.###..##..#..#.....####.#.....##.##.#..#.#.###.#..#######...##..#.#..#.#..############.###
.##..####.#..#.....###..#..#.#.....#.#.#...##.##.#....#..#..###.#...#....#.#...####..#.....###.####.
..#...#.###.###....##.#..#.##..####.##.#.##.##.##...###.####..#.#.#.##.#.#.#..###..##.##.##.##.#..##
#...............##.....######.#.#####.##.#....#.#..#.##...#.##....#........##.##...#.##.##.#..#.##.#
#..##..#.#.#.##.#..#.#.##.##...#...#..#.#.##..#.#...###...##...###..#####.#.#..#..#.#..#.#.##...##.#
.#######.#.....##...#.#.####.######.#..#......#....##.#.#..#..###.#...###...#....#.#..#.##.#...#.#..
#.###......##.#.##..#.###.###..####..##....#..###......##..##..#####.####....#...###.....###.#..#...
###...#....###.#..#.###.##...###.##.......##.##.#.#.#....####....###..##.###...#..##....#.#.##..##..
.##.......##.######.#.#..#..##....#####.###.#.##.....####....#......####....#.##.#.##..#.##...##.#.#
.#.###...#.#.#.##.###..###...##..#.##.##..##..#.....###.#..#.##.##.####........##.#####.#.#....#...#
##...##..#.##.#######.###.#.##.#####....##.....##.#.....#.#.##.#....#.##.#....##.#..#.###..#..#.#...
.#..#.#.#.#...#.##...###.##.#.#...###.##...#.#..###....###.#.###...##..###..#..##.##....###...###.##

"""

input = input.strip().split("\n")

def print_matrix(m):
  for l in range(len(m)):
    print(m[l])

matrix = []
for row in range(0,len(input)):
  matrix.append([])
  for col in range(0,len(input[0])):
    matrix[row].append(".")

new_matrix_to_copy = deepcopy(matrix)

for y, i in enumerate(input):
  y = y
  chars = [char for char in i]
  for x, c in enumerate(chars):
    x = x
    matrix[y][x] = c

max_col = len(matrix[0])-1
max_row = len(matrix)-1

new_matrix = deepcopy(new_matrix_to_copy)

for step in range(0,100):
  for row in range(len(matrix)):
    for col in range(len(matrix[0])):
      neighbor_count = 0

      if row == 0:
        if col == 0:
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        elif col == max_col:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        else:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
          
          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
          
          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1
      elif row == max_row:
        if col == 0:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1
          
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
        elif col == max_col:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
        else:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
      else:
        if col == 0:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        elif col == max_col:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1

          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1

          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        else:
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1

          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

      if matrix[row][col] == "#":
        if neighbor_count == 2 or neighbor_count == 3:
          new_matrix[row][col] = "#"
        else:
          new_matrix[row][col] = "."
      elif matrix[row][col] == ".":
        if neighbor_count == 3:
          new_matrix[row][col] = "#"
        else:
          new_matrix[row][col] = "."
  
  matrix = new_matrix
  new_matrix = deepcopy(new_matrix_to_copy)

star1 = 0

for row in range(len(matrix)):
  for col in range(len(matrix[0])):
    if matrix[row][col] == "#":
      star1 += 1

print("star 1", star1)

matrix = deepcopy(new_matrix_to_copy)

for y, i in enumerate(input):
  chars = [char for char in i]
  for x, c in enumerate(chars):
    matrix[y][x] = c

max_col = len(matrix[0])-1
max_row = len(matrix)-1

matrix[0][0] = "#"
matrix[max_row][0] = "#"
matrix[0][max_col] = "#"
matrix[max_row][max_col] = "#"

new_matrix = deepcopy(new_matrix_to_copy)

for step in range(0,100):
  for row in range(len(matrix)):
    for col in range(len(matrix[0])):
      neighbor_count = 0

      if row == 0:
        if col == 0:
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        elif col == max_col:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        else:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
          
          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
          
          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1
      elif row == max_row:
        if col == 0:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1
          
          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
        elif col == max_col:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
        else:
          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1
          
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1
      else:
        if col == 0:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        elif col == max_col:
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1

          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1

          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1
          
          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1
        else:
          # top left
          if matrix[row-1][col-1] == "#":
            neighbor_count += 1
          
          # top
          if matrix[row-1][col] == "#":
            neighbor_count += 1
          
          # top right
          if matrix[row-1][col+1] == "#":
            neighbor_count += 1

          # right
          if matrix[row][col+1] == "#":
            neighbor_count += 1

          # bottom right
          if matrix[row+1][col+1] == "#":
            neighbor_count += 1

          # bottom
          if matrix[row+1][col] == "#":
            neighbor_count += 1

          # bottom left
          if matrix[row+1][col-1] == "#":
            neighbor_count += 1

          # left
          if matrix[row][col-1] == "#":
            neighbor_count += 1

      if (row == 0 and col == 0) or (row == max_row and col == 0) or (row == 0 and col == max_col) or (row == max_row and col == max_col):
        new_matrix[row][col] = "#"
      elif matrix[row][col] == "#":
        if neighbor_count == 2 or neighbor_count == 3:
          new_matrix[row][col] = "#"
        else:
          new_matrix[row][col] = "."
      elif matrix[row][col] == ".":
        if neighbor_count == 3:
          new_matrix[row][col] = "#"
        else:
          new_matrix[row][col] = "."
  
  matrix = new_matrix
  new_matrix = deepcopy(new_matrix_to_copy)

star2 = 0

for row in range(len(matrix)):
  for col in range(len(matrix[0])):
    if matrix[row][col] == "#":
      star2 += 1

print("star 2", star2)